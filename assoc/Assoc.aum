import Standard.Buffer (
  Buffer,
  allocateEmpty,
  destroyFree,
  insertBack,
  nth,
  length
);

module body Assoc is
  record Assoc: Linear is
    keys: Buffer[Int32];
    values: Buffer[Int32];
  end;

  function makeEmpty(): Assoc is
    let keys: Buffer[Int32] := allocateEmpty();
    let values: Buffer[Int32] := allocateEmpty();
    return Assoc(keys => keys, values => values);
  end;

  generic [R: Region]
  function insert(assoc: &![Assoc, R], key: Int32, value: Int32): Unit is
    insertKey(reborrow(assoc), key);
    insertValue(reborrow(assoc), value);
    return nil;
  end;

  generic [R: Region]
  function insertKey(assoc: &![Assoc, R], key: Int32): Unit is
    insertBack(&(assoc->keys), key);
    return nil;
  end;

  generic [R: Region]
  function insertValue(assoc: &![Assoc, R], value: Int32): Unit is
    insertBack(&(assoc->values), value);
    return nil;
  end;

  function with(assoc: Assoc, key: Int32, value: Int32): Assoc is
    var {
      keys: Buffer[Int32],
      values: Buffer[Int32]
    } := assoc;
    insertBack(&!keys, key);
    insertBack(&!values, value);
    return Assoc(keys => keys, values => values);
  end;

  generic [R: Region]
  function display(assoc: &[Assoc, R]): Unit is
    printLn("keys:");
    for i from 0 to length(&(assoc->keys)) - 1 do
      printLn(nth(&(assoc->keys), i));
    end for;

    printLn("values:");
    for i from 0 to length(&(assoc->values)) - 1 do
      printLn(nth(&(assoc->values), i));
    end for;
    return nil;
  end;

  function unmake(assoc: Assoc): Unit is
    let {
      keys: Buffer[Int32],
      values: Buffer[Int32]
    } := assoc;
    destroyFree(keys);
    destroyFree(values);
    return nil;
  end;
end module body.
